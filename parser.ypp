%{
    #include "Utilities.hpp"
    #include "RulesTypes.hpp"
    #include "hw3_output.hpp"
%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token AUTO
%token ID
%token NUM
%token STRING
%token RETURN
%token TRUE
%token FALSE
%token IF
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token WHILE

%left   ASSIGN
%left   OR
%left   AND
%left   RELOP_EQUAL
%left   RELOP_GLT
%left   BINOP_ADD
%left   BINOP_MUL
%right  NOT
%left   LBRACE
%left   RBRACE
%left   LPAREN
%left   RPAREN
%nonassoc ELSE

%%
//rules
Program:                                       {openScope();
                                               addPrintFunctionsToTable();
                                               addDivisionByZeroError();
                                               declarePrintFunctions();}
            Funcs                              {printBuffer();}
;

Funcs:      /*epsilon*/
            |FuncDecl Funcs
;

FuncDecl:   RetType ID LPAREN Formals RPAREN  {addFuncNewEntry($2->getId(),$1->getType(),$4->getVecArgsType());
                                               defineFuncDecl($1->getType(), $2->getId(), $4->getVecArgsType());
                                               allocateFuncStack();}
            LBRACE                            {openScope();
                                               setIsReturn(false);
                                               addFuncArgsToTable($4->getVecArgsType(),$4->getVecArgsID());} /*add func args as neg entries*/
            Statements RBRACE                 {HandleReturn($1->getType());
                                               closeScope();}
;

RetType:    Type                            {$$ = new RetTypeClass($1->getType());}
            |VOID                           {$$ = new RetTypeClass("VOID"); }
;

Formals:	 /*epsilon*/                    {$$ = new FormalsClass();}
			|FormalsList                    {$$ = new FormalsClass($1->getVecArgsType(),$1->getVecArgsID());}
;

FormalsList: FormalDecl                     {$$ = new FormalsListClass();
                                             $$->addNewArg($1->getArgType(),$1->getArgID());}
			|FormalDecl COMMA FormalsList   {$$ = new FormalsListClass($3->getVecArgsType(), $3->getVecArgsID());
			                                 $$->addNewArg($1->getArgType(),$1->getArgID());}
;

FormalDecl:	Type ID                         {$$ = new FormalDeclClass($1->getType(),$2->getId()); }
;

Statements:  Statement             {$$ = new StatementsClass(STATEMENTS_STATEMENT, $1);}
			|Statements Statement   {$$ = new StatementsClass(STATEMENTS_STATEMENTS_STATEMENT, $1, $2);}
;

Statement:	Type ID SC              {addVarNewEntry($2->getId(), $1->getType());
                                    $$ = new StatementClass(STATEMENT_ID, $1);}
			|Type ID ASSIGN Exp SC  {checkIfAssignValidByType($1->getType(), $4->getType());
			                        addVarNewEntry($2->getId(), $1->getType());
			                        $$ = new StatementClass(STATEMENT_TYPE_ID_ASS_EXP, $2, $4);}
			|AUTO ID ASSIGN Exp SC 	{checkIfAutoAssignValid($4->getType());
			                        addVarNewEntry($2->getId(),$4->getType());
			                        $$ = new StatementClass(STATEMENT_TYPE_ID_ASS_EXP, $2, $4);} //WORKS LIKE STATEMENT_TYPE_ID_ASS_EXP
			|ID ASSIGN Exp SC     	{checkIfAssignValidByType(getTypeById($1->getId()), $3->getType());
			                        $$ = new StatementClass(STATEMENT_TYPE_ID_ASS_EXP, $1, $3);} //WORKS LIKE STATEMENT_TYPE_ID_ASS_EXP
			|Call SC                {$$ = new StatementClass(STATEMENT_CALL);}
			|RETURN SC				{checkReturnType("VOID");
			                        $$ = new StatementClass(STATEMENT_RET);}
			|RETURN Exp SC			{checkReturnType($2->getType());
			                        $$ = new StatementClass(STATEMENT_RET_EXP, $2);}
			|BREAK SC				{checkIfBreakValid();
			                        $$ = new StatementClass(STATEMENT_BREAK);}
			|CONTINUE SC			{checkIfContinueValid();
			                        $$ = new StatementClass(STATEMENT_CONTINUE);}
            |IF LPAREN Exp RPAREN   {openScope();
                                     checkIfBool($3->getType());}
                      M Statement   {closeScope();}
                      IfElse        {$$ = new StatementClass(STATEMENT_IF, $3, $6, $7, $9);}
			|N WHILE LPAREN M Exp RPAREN {openScope();
			                          checkIfBool($5->getType());
			                          incWhileCounter();}
			          M Statement     {closeScope();
			                          $$ = new StatementClass(STATEMENT_WHILE, $1, $4, $5, $8, $9);
			                          decWhileCounter();}
            |LBRACE                  {openScope();}
             Statements RBRACE       {$$ = new StatementClass(STATEMENT_L_STATEMENTS_R, $3);
                                      closeScope();}
;
IfElse:     /*epsilon*/ %prec ASSIGN {$$ = new IfElseClass(ELSE_UNUSED);}
            |ELSE                    {openScope();}
            N M Statement            {$$ = new IfElseClass(ELSE_USED, $3, $4, $5);
                                     closeScope();}
;

Call:		ID LPAREN ExpList RPAREN  {std::string funcRetType = checkFuncCall($1->getId(), $3->getVecArgsType());
                                      $$ = new CallClass(CALL_ID_EXPLIST, funcRetType, $1, $3); }
			|ID LPAREN RPAREN         {std::string funcRetType = checkFuncCall($1->getId());
			                          $$ = new CallClass(CALL_ID, funcRetType); }
;

ExpList:	Exp                     {$$ = new ExpListClass();
                                    $$->addNewArgToExpList($1->getType(), $1);}
			|Exp COMMA ExpList      {$$ = new ExpListClass($3->getVecArgsType());
			                        $$->addNewArgToExpList($1->getType(), $1);}
;

Type:	    INT                     {$$ = new TypeClass("INT");}
    		|BYTE                   {$$ = new TypeClass("BYTE");}
    		|BOOL                   {$$ = new TypeClass("BOOL");}
;

Exp: 	    ID                      {std::string type = getTypeById($1->getId());
                                    $$ = new ExpClass(EXP_OP_ID, type, std::string(""), $1);}
    		|Call                   {$$ = new ExpClass(EXP_OP_CALL, $1->getType(), std::string(""), $1);}
    		|NUM                    {$$ = new ExpClass(EXP_OP_NUM, "INT", $1->getValue());}
    		|NUM B                  {checkIfBValid($1->getValue());
    		                        $$ = new ExpClass(EXP_OP_NUM_B, "BYTE", $1->getValue());}
    		|STRING                 {$$ = new ExpClass(EXP_OP_STRING, "STRING", std::string(""), $1);}
    		|TRUE                   {$$ = new ExpClass(EXP_OP_TRUE, "BOOL");}
    		|FALSE                  {$$ = new ExpClass(EXP_OP_FALSE, "BOOL");}
    		|NOT Exp                {checkIfBool($2->getType());
    		                        $$ = new ExpClass(EXP_OP_NOT, "BOOL", std::string(""), $2);}
    		|Exp OR M Exp           {checkIfBool($1->getType());
    		                        checkIfBool($4->getType());
    		                        $$ = new ExpClass(EXP_OP_OR, "BOOL", std::string(""), $1, $4, nullptr, $3);}
    		|Exp AND M Exp          {checkIfBool($1->getType());
    		                        checkIfBool($4->getType());
    		                        $$ = new ExpClass(EXP_OP_AND, "BOOL", std::string(""), $1, $4, nullptr,$3);}
    		|Exp RELOP_EQUAL Exp    {checkIfNumeric($1->getType());
    		                        checkIfNumeric($3->getType());
    		                        $$ = new ExpClass(EXP_OP_EQUAL, "BOOL", std::string(""), $1, $3, $2);}
            |Exp RELOP_GLT Exp      {checkIfNumeric($1->getType());
                                    checkIfNumeric($3->getType());
                                    $$ = new ExpClass(EXP_OP_GLT, "BOOL", std::string(""), $1, $3, $2);}
            |Exp BINOP_ADD Exp      {std::string newType = setRetBinopType($1->getType(),$3->getType());
                                     $$ = new ExpClass(EXP_OP_ADD, newType, std::string(""), $1, $3, $2);}
            |Exp BINOP_MUL Exp      {std::string newType = setRetBinopType($1->getType(),$3->getType());
                                     $$ = new ExpClass(EXP_OP_MUL, newType, std::string(""), $1, $3, $2);}
    		|LPAREN Type RPAREN Exp {checkIfNumeric($2->getType());
    		                        checkIfNumeric($4->getType());
    		                        $$ = new ExpClass(EXP_OP_CAST, $2->getType(), $4->getValue(), $4);}
            |LPAREN Exp RPAREN      {$$ = new ExpClass(EXP_OP_L_EXP_R, $2->getType(), $2->getValue(), $2);}
;

M:									{$$ = new M_Class();}

N:									{$$ = new N_Class();}
%%

void yyerror(const char* input) {
    output::errorSyn(yylineno);
    exit(0);
}

int main() {
    int retVal = yyparse();
    checkMainExist();
    closeScope();
    return retVal;
}
